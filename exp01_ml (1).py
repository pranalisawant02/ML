# -*- coding: utf-8 -*-
"""EXP01_ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A9z300PbuR1riZSj5mNvqrtYBqpuZ6ii

1.IMPORT DRIVE
"""

from google.colab import drive
drive.mount('/content/drive')

"""2.IMPORT DATASET"""

import numpy as np
import pandas as pd

df=pd.read_csv("/content/drive/MyDrive/ML/IRIS.csv" )

"""3.EXPLORE DATA"""

df.info()

df.describe()

print("Missing values before imputation:")
print(df.isnull().sum())

"""4.HANDLE MISSING DATA"""

# Apply mean imputation for numerical columns
numerical_cols = ['sepal_length', 'petal_length']
for col in numerical_cols:
    df[col].fillna(df[col].mean(), inplace=True) # Use inplace=True to modify the DataFrame directly

# Apply mode imputation for categorical columns
categorical_cols = ['sepal_width']
for col in categorical_cols:
    df[col].fillna(df[col].mode()[0], inplace=True)

print("\nDataFrame after imputation:")
print(df)

"""5. Handle Categorical Variables:"""

# Identify categorical columns based on dtype
categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
print("Categorical Columns:", categorical_cols)

# Assuming 'species' is the target column and it has no ordinal relationship
from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
df['species_encoded'] = label_encoder.fit_transform(df['species'])
print("\nDataFrame after Label Encoding 'species':")
print(df[['species', 'species_encoded']].head())

# Apply OneHotEncoder to nominal categorical columns
from sklearn.preprocessing import OneHotEncoder

# Assuming 'species' is the nominal column
onehot_encoder = OneHotEncoder(sparse_output=False) # sparse_output=False returns a dense NumPy array

# Fit and transform the 'species' column
encoded_species = onehot_encoder.fit_transform(df[['species']])

# Create a DataFrame from the encoded data with appropriate column names
encoded_species_df = pd.DataFrame(encoded_species, columns=onehot_encoder.get_feature_names_out(['species']))

# Concatenate the encoded DataFrame with the original DataFrame (dropping the original 'species' column)
df_onehot_encoded = pd.concat([df.drop(columns=['species']), encoded_species_df], axis=1)

print("\nDataFrame after One-Hot Encoding 'species':")
print(df_onehot_encoded.head())

"""6.Apply Normalization or Standardization:"""

from sklearn.preprocessing import StandardScaler, MinMaxScaler

#1.Identify numerical columns requiring scaling.
numerical_cols = df.select_dtypes(include=['float64', 'int64']).columns.tolist()

if 'species_encoded' in numerical_cols:
    numerical_cols.remove('species_encoded')

print("Numerical Columns for Scaling:", numerical_cols)

#2. Choose either MinMaxScaler or StandardScaler based on data distribution
# To inspect the distribution, we can use describe() and boxplots
print("\nDescriptive Statistics of Numerical Columns:")
print(df[numerical_cols].describe())

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
sns.boxplot(data=df[numerical_cols])
plt.title('Boxplot of Iris Numerical Features')
plt.show()

#3. Apply the chosen scaling method (StandardScaler)
# Apply StandardScaler to the numerical columns
scaler = StandardScaler()
df[numerical_cols] = scaler.fit_transform(df[numerical_cols])

print("\nDataFrame after Standardization (StandardScaler):")
print(df.head())

"""7.Split Dataset:"""

from sklearn.model_selection import train_test_split

# Define features (X) and target (y) using the one-hot encoded DataFrame
X = df_onehot_encoded.drop(columns=['species_encoded', 'species_Iris-setosa', 'species_Iris-versicolor', 'species_Iris-virginica'])
y = df_onehot_encoded['species_encoded']

# Split the data into training and testing sets (e.g., 70-30 split)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

print(f"\nShape of X_train: {X_train.shape}")
print(f"Shape of X_test: {X_test.shape}")
print(f"Shape of y_train: {y_train.shape}")
print(f"Shape of y_test: {y_test.shape}")

!zip my_project.zip my_notebook.ipynb iris.csv